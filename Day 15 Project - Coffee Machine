MENU = {
    "espresso": {
        "ingredients": {
            "water": 50,
            "coffee": 18,
        },
        "cost": 1.5,
    },
    "latte": {
        "ingredients": {
            "water": 200,
            "milk": 150,
            "coffee": 24,
        },
        "cost": 2.5,
    },
    "cappuccino": {
        "ingredients": {
            "water": 250,
            "milk": 100,
            "coffee": 24,
        },
        "cost": 3.0,
    }
}

resources = {
    "water": 300,
    "milk": 200,
    "coffee": 100,
}

MONEY = 0.00

# TODO 3 Print a report of all the coffee machine resources.
def run_report():
    """Runs a resources report"""
    print(f"Water:  {resources["water"]}ml")
    print(f"Milk:   {resources["milk"]}ml")
    print(f"Coffee: {resources["coffee"]}g")
    print(f"Money:  ${MONEY}")

# TODO 5 Process Coins
def collect_coins(coffee_type):
    """Collect coins and tally total. Return change if overpaid. Return all coins if underpaid. Returns a True/False to the make_drink module."""
    total_paid = 0
    coffee_cost = MENU[coffee_type]["cost"]
    print(f"Customer ordered: {coffee_type} ${coffee_cost}")
    print("Please insert coins.")
    quarters = int(input("How many quarters?"))
    dimes = int(input("How many dimes?"))
    nickels = int(input("How many nickles?"))
    pennies = int(input("How many pennies?"))
    total_paid = (quarters * 0.25) + (dimes * 0.1) + (nickels * 0.05) + (pennies * 0.01)
    round(total_paid, 2)
    print(f"Customer paid: {total_paid}")
    # MENU["espresso"]["cost"] pulls the cost value of the drink
    # print(f"Cost of coffee: {coffee_cost}")
# TODO 6 Check for successful transaction
    if total_paid > coffee_cost:
        print(f"Here is your ${round((total_paid - coffee_cost), 2)} in change.")
        return True
    elif total_paid == coffee_cost:
        print("Thank you for paying the exact change.")
        return True
    else:
        print(f"Sorry, that is not enough money. Money refunded.")
        return False

def check_water(water_needed):
    if water_needed <= resources["water"]:
        return True
    else:
        return False

def check_coffee(coffee_needed):
    if coffee_needed <= resources["coffee"]:
        return True
    else:
        return False

def check_milk(milk_needed):
    if milk_needed <= resources["milk"]:
        return True
    else:
        return False

# TODO 4 Check for sufficient resources before making coffee.
def check_resources(coffee_type):
    """Checking whether there's enough water, milk, and coffee to make the order. If there are not enough resources, False is returned to make_drink and a refund can be made."""
    # print(MENU[coffee_type]["ingredients"])
    # print(resources)
    water = check_water(MENU[coffee_type]["ingredients"]["water"])
    coffee = check_coffee(MENU[coffee_type]["ingredients"]["coffee"])
    # No milk in espresso - need to make this an if statement to skip the check when making espresso.
    if coffee_type != "espresso":
        milk = check_milk(MENU[coffee_type]["ingredients"]["milk"])
    else:
        milk = True
    if water and coffee and milk == True:
        return True
    elif not water:
        print(f"Sorry, there is not enough water.")
        return False
    elif not coffee:
        print("Sorry there is not enough coffee.")
        return False
    else:
        print("Sorry there is not enough milk.")
        return False

# TODO 7 Make coffee
def deduct_resources_and_collect_money(coffee):
    resources["water"] -= MENU[coffee]["ingredients"]["water"]
    resources["coffee"] -= MENU[coffee]["ingredients"]["coffee"]
    if coffee != "espresso":
        resources["milk"] -= MENU[coffee]["ingredients"]["milk"]
    global MONEY
    MONEY += MENU[coffee]["cost"]
    return False

def make_drink(coffee_order):
    """Decreases the resources for coffees"""
    continue_to_make_coffee = check_resources(coffee_order)
    while continue_to_make_coffee:
        continue_to_make_coffee = collect_coins(coffee_order)
        if continue_to_make_coffee:
            continue_to_make_coffee = deduct_resources_and_collect_money(coffee_order)
        print(f"Here is your {coffee_order}. â˜• Enjoy!")

# TODO 1 Prompt user by asking "What would you like? espresso/latte/cappuccino):"
machine_on = True
while machine_on:
    customer_order = input("What would you like? (espresso/latte/cappuccino): ")
    # TODO 2 Turn off the Coffee Machine by entering "off" to the prompt.
    if customer_order == "off":
        machine_on = False
    elif customer_order == "report":
        run_report()
    else:
        try:
            make_drink(customer_order)
        except:
            KeyError
            print("I did not understand that. Please try again.")
